1. content projection. 
Content is projected from parent to the child.
In our case, parent = app.component.ts  
             child = auth-form.component.ts.

app.component.ts:
	<auth-form 
        (submitted)="createUser($event)">
        <h3>Create account</h3>			// content#1 to project
      </auth-form>
      <auth-form 
        (submitted)="loginUser($event)">
        <h3>Login</h3>					    // content#2 to project
      </auth-form>
	  
auth-form.ts:
	<form (ngSubmit)="onSubmit(form.value)" #form="ngForm">
        <ng-content></ng-content>	  // placeholder for the incoming content (to project).
        <label>
          Email address
          <input type="email" name="email" ngModel>
        </label>
        <label>
          Password
          <input type="password" name="password" ngModel>
        </label>
        <button type="submit">
          Submit
        </button>
      </form>
    </div>	  

---

2. ng-content + projection slots
Let say we want to inject a different button based on the form.

Problem: if two of more different types (h3 + button) are projected, there is only one ng-content, so everything will be displayed @ one place.
         How to display them separately ??? 
A. Use projection-slots.
   Projection-slots tell angular which incoming content should go in which slot.
   Projection-slots are implemented using the "select" attribute of ng-content.
   
   Think of projection-slots as queryselectors.

So, we can write any of the following in our child-component   
  2.1  (Using the tag name)
    <ng-content select="h3"></ng-content>
   <ng-content select="button"></ng-content>
  2.2  (Using an id)
   <ng-content select="#someid"></ng-content> 
  2.3  (Using an css class) -- may have gotchas
   in child: <ng-content select=".someCSSClass"></ng-content> 
   in parent: u may need to add like class = "someCssClass" in the content being projected, i Think
    eg. 
    <button type="submit" class="someCSSClass">Login</button> 

  eg. 

  app.component.ts
        @Component({
        selector: 'app-root',
        template: `
          <div>
            <auth-form 
              (submitted)="createUser($event)">
              <h3>Create account</h3>
              <button type="submit"> Join us </button> // content #1 projected
            </auth-form>
            <auth-form 
              (submitted)="loginUser($event)">
              <h3>Login</h3>
              <button type="submit">Login</button>    // content #2 projected
            </auth-form>
          </div>
        `
      })      

auth-form.ts

      @Component({
        selector: 'auth-form',
        template: `
          <div>
            <form (ngSubmit)="onSubmit(form.value)" #form="ngForm">
              <ng-content select="h3"></ng-content>   // projection-slot #1 for content#1
              <label>
                Email address
                <input type="email" name="email" ngModel>
              </label>
              <label>
                Password
                <input type="password" name="password" ngModel>
              </label>
              <ng-content select="button"></ng-content> // projection-slot #2 for content#2
            </form>
          </div>
        `
      })

---

3. Content-Projecting components & binding to them.
Here, we will see how to content-project a custom component (instead of a button).

@Component({
  selector: 'app-root',
  template: `
    <div>
      <auth-form 
        (submitted)="createUser($event)">
        <h3>Create account</h3>
        <button type="submit">
          Join us
        </button>
      </auth-form>
      <auth-form 
        (submitted)="loginUser($event)">
        <h3>Login</h3>
        <auth-remember (checked)="rememberUser($event)"></auth-remember>    // content is a custom-component.
        <button type="submit">
          Login
        </button>
      </auth-form>
    </div>
  `
})
...
rememberUser() will need to be implemented in the parent app.component.ts

@Component({
  selector: 'auth-form',
  template: `
    <div>
      <form (ngSubmit)="onSubmit(form.value)" #form="ngForm">
        <ng-content select="h3"></ng-content>
        <label>
          Email address
          <input type="email" name="email" ngModel>
        </label>
        <label>
          Password
          <input type="password" name="password" ngModel>
        </label>
        <ng-content select="auth-remember"></ng-content>    // same as before !!! use the custom-component's html selector
        <ng-content select="button"></ng-content>
      </form>
    </div>
  `
})

---

Additional learning#1: (best practise #1)
> in trying to keep app.module.ts readable, we have create auth-form.module.ts.
> this helps modular coding and testing each module properly using test-bed.
eg.
app.module.ts (parent-module):-
        import { NgModule } from '@angular/core';
        import { BrowserModule } from '@angular/platform-browser';
        import { AuthFormModule } from './auth-form/auth-form.module';
        import { AppComponent } from './app.component';

        @NgModule({
          declarations: [
            AppComponent
          ],
          imports: [
            BrowserModule,
            AuthFormModule
          ],
          bootstrap: [
            AppComponent
          ]
        })
        export class AppModule {}
  
auth-form.module.ts:
        import { NgModule } from '@angular/core';
        import { FormsModule } from '@angular/forms';
        import { CommonModule } from '@angular/common';

        import { AuthFormComponent } from './auth-form.component';
        import { AuthRememberComponent } from './auth-remember.component';

        @NgModule({
          declarations: [
            AuthFormComponent,
            AuthRememberComponent
          ],
          imports: [
            CommonModule,
            FormsModule
          ],
          exports: [
            AuthFormComponent,
            AuthRememberComponent
          ]
        })
        export class AuthFormModule {}

---

4. @ContentChild and ngAfterContentInit

What is content-child ??
      <auth-form (submitted)="loginUser($event)">
        <h3>Login</h3>  // content child begins
        <auth-remember (checked)="rememberUser($event)"></auth-remember>    // content is a custom-component.
        <button type="submit">
          Login
        </button>       // content child ends
      </auth-form>
Everything within <auth-form> is a content-child.

eg. auth-form.component.ts 
  <ng-content select="auth-remember"></ng-content>
        <div *ngIf="showMessage">
          You will be logged in for 30 days
        </div>

  @ContentChild(AuthRememberComponent) remember: AuthRememberComponent;
  ngAfterContentInit() {
    if (this.remember) {
      this.remember.checked.subscribe((checked: boolean) => this.showMessage = checked);
    }
  }

Additional learning#2: 
    >> You can subscribe() to @Output variable. VIMP!!!
    >> ngAfterContentInit is triggered after the DOM has been loaded ???

---

5. @ContentChildren and QueryLists

  app.component.ts
      <auth-form (submitted)="loginUser($event)">
        <h3>Login</h3>
        <auth-remember (checked)="rememberUser($event)"></auth-remember>
        <auth-remember (checked)="rememberUser($event)"></auth-remember>
        <auth-remember (checked)="rememberUser($event)"></auth-remember>
        <button type="submit">
          Login
        </button>
      </auth-form>

  auth-form.component.ts  
    @ContentChildren(AuthRememberComponent) remember: QueryList<AuthRememberComponent>;

  // use foreach to loop over the items in the querylist.
    ngAfterContentInit() {
        if (this.remember) {
          this.remember.forEach((item) => {
            item.checked.subscribe((checked: boolean) => this.showMessage = checked);
          });
        }
      }

---
---

6. 
@ViewChild and ngAfterViewInit
  - ViewChild should be used in non-content projection times.
  - it cannot be applied to elements which are content-projected.
  

Problem:- Expression has changed after it was checked error.
A. Move code from ngAfterViewInit to ngAfterContentInit

auth-form.component.ts
		<ng-content select="auth-remember"></ng-content>
        <auth-message 
          [style.display]="(showMessage ? 'inherit' : 'none')">
        </auth-message>
		
@ViewChild(AuthMessageComponent) message: AuthMessageComponent;
ngAfterContentInit() {
    if (this.message) {
      this.message.days = 30;
    }
   ....
  }		
  
7. ViewChildren and Querylist  (ONLY exception, for viewchildren, use ONLY ngAfterViewInit)
QueryList is a live-collection and will be updated when u add something.

IMP: ViewChildren is only available inside ngAfterViewInit, because its a live collection

Problem:- Expression has changed after it was checked error.
Sol1:- Put the mutation-code in setTimeout, without any secs.
Sol2:- Use ChangeDetectionRef.

<ng-content select="auth-remember"></ng-content>
        <auth-message 													// note this.
          [style.display]="(showMessage ? 'inherit' : 'none')">
        </auth-message>
        <auth-message 													// note this.
          [style.display]="(showMessage ? 'inherit' : 'none')">
        </auth-message>
        <auth-message 													// note this.		
          [style.display]="(showMessage ? 'inherit' : 'none')">
        </auth-message>				
		
		@ViewChildren(AuthMessageComponent) message: QueryList<AuthMessageComponent>;		
		constructor(private cd: ChangeDetectorRef) {}	// note this.				
		  ngAfterViewInit() {
			if (this.message) {
			  this.message.forEach((message) => {
				message.days = 30;				// This mutation is causing the error.
			  });
			  this.cd.detectChanges();			// note this.
			}
		  }		
  
8.

ViewChild and template#refs

<label>
          Email address
          <input type="email" name="email" ngModel #email>
        </label>
		
@ViewChild('email') email: ElementRef;    // this means @ViewChild('#email') email: ElementRef;		

 ngAfterContentInit() {
    console.log(this.email);
}	

9. Using ElementRef and NativeElement.

this.email.nativeElement.setAttribute('placeholder', 'Enter your email Address');
this.email.nativeElement.classList.add('emailcss')
this.email.nativeElement.focus();

.emailcss { border-color: #9f72e6;}



10. Renderer/2 vs NativeElement: use Renderer for writing platform independent code.
NativeElement is only for the web.

10.1 
use this:- this.renderer.setElementAttribute(this.email.nativeElement, 'placeholder', 'Enter your email Address');  
	// instead of:- this.email.nativeElement.setAttribute('placeholder', 'Enter your email Address');
	
10.2
use this:- this.renderer.setElementClass(this.email.nativeElement, 'emailcss', true)
	// instead of:- this.email.nativeElement.classList.add('emailcss')
	
10.3
use this:- this.renderer.invokeElementMethod(this.email.nativeElement, 'focus')
	// instead of :- this.email.nativeElement.focus();
	
	
----------------------------------

nativeElement is for the web.
renderer2 is for all env i.e. mobile n web.

11. ComponentFactoryResolver , ViewContainRef + ViewChild

11.1 Creating a Dynamic Component.
- we create a factory for the DOM and then inject it in a placeholder-div <div #entry></div> tag in the template-section
- @ViewChild('entry') entry: ViewContainerRef;
> It takes a 2nd param as well:- 
	@ViewChild('entry', { read: ViewContainRef} ) entry: ViewContainerRef;  // We will use this to create the dynamic component and insert it into #entry 
> This gives us a different lookup token than what we used previously like: @ViewChild('nameof#ref') eRef: ElementRef

- 
constructor(
	private resolver: ComponentFactoryResolver;
) {
}

ngAfterContentInit(){
	const authFormFactory = this.resolver.resolveComponentFactory(AuthFormComponent); //AuthFormComponent is imported above.
	const component = this.entry.createComponent(authFormFactory);  // Console Error: did u add it to ngModule.entryComponents?. Solution: in app.module.ts add entryComponents array
}

---

NOTE: 
11.2 Input Elements for Dynamic Components
	- Dynamic Components do not have an @Input(), so we cannot use it.
    - component object above gives us component.instance, using which we can overwrite: component.instance.title = 'Create Account'

11.3. Output Elements for Dynamic Components
	- If AuthFormComponent had an event @Output() 'submitted' : EventEmitter ... , then we can subscribe to it like this.
		component.instance.submitted.subscribe( ... )


11.4 Destroying dynamic component:
- for this, change the lines like this:-
	old: const component = this.entry.createComponent(authFormFactory);
	new: 
		component: ComponentRef<AuthFormComponent>; // NOte: ComponentRef needs to be imported
		ngAfterContentInit(){
			this.component = this.entry.createComponent(authFormFactory);
		}
		destroyComponent() {	// this can be called on button click
			this.component.destroy();
		}
		
11.5 Dynamic Components in a specific order:
		ngAfterContentInit(){
			this.entry.createComponent(authFormFactory); // -1 is default. this is same as writing this.entry.createComponent(authFormFactory, -1);
			this.component = this.entry.createComponent(authFormFactory, 0);  // 2nd param is zero.
		}

		moveComponent() {
			this.entry.move (this.component.hostView, 1);  // we r moving the comp. from -1 to after 0, i.e. 1. // Note hostView.
			// NOTE: this.entry is the viewchild i believe.
		}
		
---

11.6 Dynamic template rendering with ViewContainerRef

	Plan: is to instantiate this template and insert it into #entry.

	<template #tmpl>
		ToddMotto, England, UK
	</template>

	@ViewChild('tmpl'), tmpl: TemplateRef <any>; // NOTE: import TemplateRef

	ngAfterContentInit() {
		this.entry.createEmbeddedView(this.tmpl); // Here we are using createEmbeddedView instead of createComponent	
	}
	
	
11.7 Passing context to a dynamic template	


















